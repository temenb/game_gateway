import dotenv from 'dotenv';
import httpApp from './http/server';
import grpcServer from './server';
import * as grpc from '@grpc/grpc-js';
import logger from '@shared/logger';

dotenv.config();

const GRPC_PORT = process.env.GRPC_PORT ?? '3000';
const HTTP_PORT = process.env.HTTP_PORT ?? 5000;

async function startGrpc() {
  return new Promise<void>((resolve, reject) => {
    grpcServer.bindAsync(
      `0.0.0.0:${GRPC_PORT}`,
      grpc.ServerCredentials.createInsecure(),
      (err, port) => {
        if (err) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gRPC:', err);
          return reject(err);
        }
        grpcServer.start();
        logger.info(`üü¢ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve();
      }
    );
  });
}

async function startHttp() {
  return new Promise<void>((resolve) => {
    httpApp.listen(HTTP_PORT, () => {
      logger.info(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTP_PORT}`);
      resolve();
    });
  });
}

async function bootstrap() {
  try {
    await Promise.all([startGrpc(), startHttp()]);
    logger.info('üöÄ Gateway —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: gRPC + HTTP');
  } catch (err) {
    logger.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Gateway:', err);
    process.exit(1);
  }

  process.on('SIGINT', () => {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    grpcServer.forceShutdown();
    process.exit(0);
  });
}

bootstrap();
