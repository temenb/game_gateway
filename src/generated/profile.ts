// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.6.1
// source: profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "profile";

export interface MeRequest {
}

export interface ProfileResponse {
  level: string;
}

function createBaseMeRequest(): MeRequest {
  return {};
}

export const MeRequest: MessageFns<MeRequest> = {
  encode(_: MeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MeRequest {
    return {};
  },

  toJSON(_: MeRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MeRequest>): MeRequest {
    return MeRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MeRequest>): MeRequest {
    const message = createBaseMeRequest();
    return message;
  },
};

function createBaseProfileResponse(): ProfileResponse {
  return { level: "" };
}

export const ProfileResponse: MessageFns<ProfileResponse> = {
  encode(message: ProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== "") {
      writer.uint32(10).string(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.level = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileResponse {
    return { level: isSet(object.level) ? globalThis.String(object.level) : "" };
  },

  toJSON(message: ProfileResponse): unknown {
    const obj: any = {};
    if (message.level !== "") {
      obj.level = message.level;
    }
    return obj;
  },

  create(base?: DeepPartial<ProfileResponse>): ProfileResponse {
    return ProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProfileResponse>): ProfileResponse {
    const message = createBaseProfileResponse();
    message.level = object.level ?? "";
    return message;
  },
};

export type ProfileServiceService = typeof ProfileServiceService;
export const ProfileServiceService = {
  me: {
    path: "/profile.ProfileService/Me",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MeRequest): Buffer => Buffer.from(MeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MeRequest => MeRequest.decode(value),
    responseSerialize: (value: ProfileResponse): Buffer => Buffer.from(ProfileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProfileResponse => ProfileResponse.decode(value),
  },
} as const;

export interface ProfileServiceServer extends UntypedServiceImplementation {
  me: handleUnaryCall<MeRequest, ProfileResponse>;
}

export interface ProfileServiceClient extends Client {
  me(request: MeRequest, callback: (error: ServiceError | null, response: ProfileResponse) => void): ClientUnaryCall;
  me(
    request: MeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
  me(
    request: MeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProfileResponse) => void,
  ): ClientUnaryCall;
}

export const ProfileServiceClient = makeGenericClientConstructor(
  ProfileServiceService,
  "profile.ProfileService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProfileServiceClient;
  service: typeof ProfileServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
